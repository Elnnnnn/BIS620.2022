tabPanel("Word Cloud",plotOutput("wordcloud_plot")),
tabPanel("World Map",plotOutput("country_plot")),
tabPanel("American Map",plotOutput("states_us_plot")),
tabPanel("Top 10 Investigated Diseases",plotOutput("mesh_pie_chart"))
),
DT::dataTableOutput("trial_table")
)
)
),
# Define server logic required to draw a histogram
server = function(input, output) {
get_studies = reactive({
if (input$brief_title_kw != "") {
si = input$brief_title_kw |>
strsplit(",") |>
unlist() |>
trimws()
ret = query_kwds(studies, si, "brief_title", match_all = TRUE)
} else {
ret = studies
}
if(input$source_class != "no_filter"){
ret = ret |>
filter(source_class %in% !!input$source_class)
}else{
ret = ret
}
if (!is.null(input$start_date_range)) {
start_date_s <- as.Date(input$start_date_range[1])
end_date_s <- as.Date(input$start_date_range[2])
ret = ret |>
filter(start_date >= start_date_s & start_date <= end_date_s)
}
if (!is.null(input$completion_date_range)) {
start_date_c <- as.Date(input$completion_date_range[1])
end_date_c <- as.Date(input$completion_date_range[2])
ret = ret |>
filter(completion_date >= start_date_c & completion_date <= end_date_c)
}
ret |>
head(max_num_studies) |>
collect()
})
output$phase_plot = renderPlot({
get_studies() |>
plot_phase_histogram()
})
output$concurrent_plot = renderPlot({
get_studies() |>
select(start_date, completion_date) |>
get_concurrent_trials() |>
ggplot(aes(x = date, y = count)) +
geom_line() +
xlab("Date") +
ylab("Count") +
theme_bw()
})
output$conditions_plot = renderPlot({
get_studies() |>
plot_conditions_histogram()
})
output$trial_table =  DT::renderDataTable({
df = get_studies() |>
table_with_link()
DT::datatable(df[drop = FALSE], escape = FALSE)
})
terms <- reactive({
# Change when the "update" button is pressed...
input$update
# ...but not for anything else
isolate({
withProgress({
setProgress(message = "Processing corpus...")
getTermMatrix(get_studies())
})
})
})
output$wordcloud_plot <- renderPlot({
v <- terms()
wordcloud(names(v), v, scale=c(4,0.5),
min.freq = input$freq, max.words=input$max,
colors=brewer.pal(8, "Dark2"))
})
output$country_plot <-renderPlot({
get_studies() |>
plot_countries()
})
output$states_us_plot <-renderPlot({
get_studies() |>
plot_states_us()
})
output$mesh_pie_chart <-renderPlot({
get_studies() |>
pie_chart_mesh()
})
}
)
}
#shinyApp(ui = ui, server = server)
#shiny_app()
document()
library(usethis)
library(testthat)
library(devtools)
library(covr)
document()
check()
test_that("plot_phase_histogram creates a plot with correct axes", {
data("studies")
# Run the function to get the plot
p <- plot_phase_histogram(studies)
# Check that it returns a ggplot object
expect_true(is.ggplot(p))
# Check that the plot has an x-axis named "Phase"
expect_equal("Phase", p$labels$x)
# Check that the plot has a y-axis named "Count"
expect_equal("Count", p$labels$y)
})
document()
test_that("plot_phase_histogram creates a plot with correct axes", {
data("studies")
# Run the function to get the plot
p <- plot_phase_histogram(studies)
# Check that it returns a ggplot object
expect_true(is.ggplot(p))
# Check that the plot has an x-axis named "Phase"
expect_equal("Phase", p$labels$x)
# Check that the plot has a y-axis named "Count"
expect_equal("Count", p$labels$y)
})
?summarize
document()
rlang::last_trace()
library(memoise)
test_that("getTermMatrix returns correct term frequencies", {
data("studies")
studies = studies |> head(10)
result <- getTermMatrix(studies)
expect_true(length(result) >0)
})
#' @title Get matrix of terms
#' @description The function is to get the keywords frequency of selected studies.
#' @param x the studies to get the number of keywords for.
#' @return a matrix containing words existed in the keyword column of x and their frequency.
#' @export
#' @importFrom memoise memoise
#' @importFrom tm tm_map TermDocumentMatrix Corpus content_transformer VectorSource stopwords
#' @importFrom dplyr select collect
getTermMatrix <- memoise(function(x) {
x = x |> collect() |> select(keyword) |> as.character()
myCorpus = Corpus(VectorSource(x))
myCorpus = tm_map(myCorpus, content_transformer(tolower))
myCorpus = tm_map(myCorpus, removePunctuation)
myCorpus = tm_map(myCorpus, removeNumbers)
myCorpus = tm_map(myCorpus, removeWords,
c(stopwords("SMART"), "thy", "thou", "thee", "the", "and", "but","study","patients"))
myDTM = TermDocumentMatrix(myCorpus,
control = list(minWordLength = 1))
m = as.matrix(myDTM)
sort(rowSums(m), decreasing = TRUE)
})
test_that("getTermMatrix returns correct term frequencies", {
data("studies")
studies = studies |> head(10)
result <- getTermMatrix(studies)
expect_true(length(result) >0)
})
#' @title Get matrix of terms
#' @description The function is to get the keywords frequency of selected studies.
#' @param x the studies to get the number of keywords for.
#' @return a matrix containing words existed in the keyword column of x and their frequency.
#' @export
#' @importFrom memoise memoise
#' @importFrom tm tm_map TermDocumentMatrix Corpus content_transformer VectorSource stopwords
#' @importFrom dplyr select collect
getTermMatrix <- memoise(function(x) {
x = x |> collect() |> select(keyword) |> as.character()
myCorpus = Corpus(VectorSource(x))
myCorpus = tm_map(myCorpus, content_transformer(tolower))
myCorpus = tm_map(myCorpus, removePunctuation)
myCorpus = tm_map(myCorpus, removeNumbers)
myCorpus = tm_map(myCorpus, removeWords,
c(stopwords("SMART"), "thy", "thou", "thee", "the", "and", "but","study","patients"))
myDTM = TermDocumentMatrix(myCorpus,
control = list(minWordLength = 1))
m = as.matrix(myDTM)
sort(rowSums(m), decreasing = TRUE)
})
document()
test_that("plot_phase_histogram creates a plot with correct axes", {
data("studies")
# Run the function to get the plot
p <- plot_phase_histogram(studies)
# Check that it returns a ggplot object
expect_true(is.ggplot(p))
# Check that the plot has an x-axis named "Phase"
expect_equal("Phase", p$labels$x)
# Check that the plot has a y-axis named "Count"
expect_equal("Count", p$labels$y)
})
?distinct
test_that("plot_phase_histogram creates a plot with correct axes", {
data("studies")
# Run the function to get the plot
p <- plot_phase_histogram(studies)
# Check that it returns a ggplot object
expect_true(is.ggplot(p))
# Check that the plot has an x-axis named "Phase"
expect_equal("Phase", p$labels$x)
# Check that the plot has a y-axis named "Count"
expect_equal("Count", p$labels$y)
})
data("studies")
# Run the function to get the plot
p <- plot_phase_histogram(studies)
test_that("plot_conditions_histogram returns a ggplot", {
data("studies")
studies = studies |> head(10)
# Running the function with the mock data
plot_result <- plot_conditions_histogram(studies)
# Check if the result is a ggplot object
expect_true(is.ggplot(plot_result))
# Optionally, add more tests here to ensure the plot has the expected elements like x and y axis labels
expect_identical(plot_result$labels$x, "Conditions")
expect_identical(plot_result$labels$y, "Count")
})
?arrange
test_that("get_concurrent_trials returns correct counts", {
data("studies")
studies = studies |> head(10)
result <- get_concurrent_trials(studies)
expect_false(nrow(result) == 0)
})
test_that("plot_countries creates a plot without error",{
data(studies)
studies = studies |> head(100)
result = plot_countries(studies)
expect_true(is.list(result))
})
?renderplot
?wordcloud
?wordcloud
??wordcloud
library(dplyr)
library(DT)
library(ggplot2)
library(tidyr)
library(purrr)
library(tm)
library(memoise)
library(rworldmap)
library(grDevices)
library(graphics)
library(utils)
test_that("plot_phase_histogram creates a plot with correct axes", {
data("studies")
# Run the function to get the plot
p <- plot_phase_histogram(studies)
# Check that it returns a ggplot object
expect_true(is.ggplot(p))
# Check that the plot has an x-axis named "Phase"
expect_equal("Phase", p$labels$x)
# Check that the plot has a y-axis named "Count"
expect_equal("Count", p$labels$y)
})
test_that("plot_conditions_histogram returns a ggplot", {
data("studies")
studies = studies |> head(10)
# Running the function with the mock data
plot_result <- plot_conditions_histogram(studies)
# Check if the result is a ggplot object
expect_true(is.ggplot(plot_result))
# Optionally, add more tests here to ensure the plot has the expected elements like x and y axis labels
expect_identical(plot_result$labels$x, "Conditions")
expect_identical(plot_result$labels$y, "Count")
})
test_that("get_concurrent_trials returns correct counts", {
data("studies")
studies = studies |> head(10)
result <- get_concurrent_trials(studies)
expect_false(nrow(result) == 0)
})
test_that("getTermMatrix returns correct term frequencies", {
data("studies")
studies = studies |> head(10)
result <- getTermMatrix(studies)
expect_true(length(result) >0)
})
test_that("plot_countries creates a plot without error",{
data(studies)
studies = studies |> head(100)
result = plot_countries(studies)
expect_true(is.list(result))
})
test_that("table_with_link creates a table without error",{
data(studies)
studies = studies |> head(10)
table = table_with_link(studies)
expect_true(nrow(table)>0)
})
test_that("plot_states_us function works correctly", {
data("studies")
studies = studies |> head(10)
# Call the function with test data
plot_result <- plot_states_us(studies)
# Test data processing
state = studies |> select(state)
# Test plot structure
expect_true(is.ggplot(plot_result), "Result is a ggplot object")
})
source("~/Desktop/BIS620.2022/tests/testthat/test-ct-util_mid.R", echo=TRUE)
document()
test()
rm(list = c("getTermMatrix"))
test_that("shiny_app works", {
result = shiny_app()
expect_true(class(result) == "shiny.appobj")
})
result = shiny_app()
#shinyApp(ui = ui, server = server)
shiny_app()
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(wordcloud)
# Steps to adding a feature:
# 1. Specify the feature.
#   - What does it do?
#   - What will be shown?
# 2. Specify the interface
#   - Where should it go?
#   - Does it enhance the user experience?
# 3. Implement the feature without the UI
# 4. Integrate the feature.
#' @title  Shiny App
#' @description The function is to run a shiny app for clinical trial inquiry
#' @export
#' @importFrom shiny shinyApp
#' @importFrom wordcloud wordcloud
shiny_app <- function(){
data("studies")
#source("R/ct-util_mid.R")
#require(shiny)
max_num_studies = 1000
# Define UI for application that draws a histogram
shinyApp(
ui = fluidPage(
# Application title
titlePanel("Clinical Trials Query"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
textInput("brief_title_kw", "Brief title keywords"),
selectInput("source_class",
label = h3("Sponsor Type"),
choices = list("All" = "no_filter",
"Federal" = "FED",
"Individual" = "INDIV",
"Industry" = "INDUSTRY",
"Network" = "NETWORK",
"NIH" = "NIH",
"Other" = "OTHER",
"Other Government" = "OTHER_GOV",
"Unknow" = "Unknown"
),
selected = 1),
dateRangeInput("start_date_range", "Start Date Range:",
start = Sys.Date() - 3000, end = Sys.Date()),
dateRangeInput("completion_date_range", "Completion Date Range:",
start = Sys.Date() - 3000, end = Sys.Date()),
actionButton("update", "Change"),
hr(),
sliderInput("freq",
"Minimum Frequency:",
min = 1,  max = 50, value = 15),
sliderInput("max",
"Maximum Number of Words:",
min = 1,  max = 300,  value = 100)
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(
type = "tabs",
tabPanel("Phase", plotOutput("phase_plot")),
tabPanel("Concurrent", plotOutput("concurrent_plot")),
tabPanel("Conditions",plotOutput("conditions_plot")),
tabPanel("Word Cloud",plotOutput("wordcloud_plot")),
tabPanel("World Map",plotOutput("country_plot")),
tabPanel("American Map",plotOutput("states_us_plot")),
tabPanel("Top 10 Investigated Diseases",plotOutput("mesh_pie_chart"))
),
DT::dataTableOutput("trial_table")
)
)
),
# Define server logic required to draw a histogram
server = function(input, output) {
get_studies = reactive({
if (input$brief_title_kw != "") {
si = input$brief_title_kw |>
strsplit(",") |>
unlist() |>
trimws()
ret = query_kwds(studies, si, "brief_title", match_all = TRUE)
} else {
ret = studies
}
if(input$source_class != "no_filter"){
ret = ret |>
filter(source_class %in% !!input$source_class)
}else{
ret = ret
}
if (!is.null(input$start_date_range)) {
start_date_s <- as.Date(input$start_date_range[1])
end_date_s <- as.Date(input$start_date_range[2])
ret = ret |>
filter(start_date >= start_date_s & start_date <= end_date_s)
}
if (!is.null(input$completion_date_range)) {
start_date_c <- as.Date(input$completion_date_range[1])
end_date_c <- as.Date(input$completion_date_range[2])
ret = ret |>
filter(completion_date >= start_date_c & completion_date <= end_date_c)
}
ret |>
head(max_num_studies) |>
collect()
})
output$phase_plot = renderPlot({
get_studies() |>
plot_phase_histogram()
})
output$concurrent_plot = renderPlot({
get_studies() |>
select(start_date, completion_date) |>
get_concurrent_trials() |>
ggplot(aes(x = date, y = count)) +
geom_line() +
xlab("Date") +
ylab("Count") +
theme_bw()
})
output$conditions_plot = renderPlot({
get_studies() |>
plot_conditions_histogram()
})
output$trial_table =  DT::renderDataTable({
df = get_studies() |>
table_with_link()
DT::datatable(df[drop = FALSE], escape = FALSE)
})
terms <- reactive({
# Change when the "update" button is pressed...
input$update
# ...but not for anything else
isolate({
withProgress({
setProgress(message = "Processing corpus...")
getTermMatrix(get_studies())
})
})
})
output$wordcloud_plot <- renderPlot({
v <- terms()
wordcloud(names(v), v, scale=c(4,0.5),
min.freq = input$freq, max.words=input$max,
colors=brewer.pal(8, "Dark2"))
})
output$country_plot <-renderPlot({
get_studies() |>
plot_countries()
})
output$states_us_plot <-renderPlot({
get_studies() |>
plot_states_us()
})
output$mesh_pie_chart <-renderPlot({
get_studies() |>
pie_chart_mesh()
})
}
)
}
#shinyApp(ui = ui, server = server)
shiny_app()
result = shiny_app()
test_that("shiny_app works", {
result = shiny_app()
expect_true(class(result) == "shiny.appobj")
})
test()
rm(list = c("shiny_app"))
test()
test()
check()
test_that("shiny_app works", {
result = shiny_app()
expect_true(class(result) == "shiny.appobj")
})
?fluidPage
document()
test_that("shiny_app works", {
result = shiny_app()
expect_true(class(result) == "shiny.appobj")
})
